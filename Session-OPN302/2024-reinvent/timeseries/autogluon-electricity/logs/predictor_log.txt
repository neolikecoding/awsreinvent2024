Inferred time series frequency: 'h'
Beginning AutoGluon training... Time limit = 120s
AutoGluon will save models to '/home/ec2-user/SageMaker/awsreinvent2024/Session-OPN302/2024-reinvent/timeseries/autogluon-electricity'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.10.15
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP Wed Oct 23 17:17:00 UTC 2024
CPU Count:          16
GPU Count:          0
Memory Avail:       57.00 GB / 61.79 GB (92.2%)
Disk Space Avail:   74.18 GB / 78.56 GB (94.4%)
===================================================
Setting presets to: medium_quality

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MASE,
 'freq': 'h',
 'hyperparameters': 'light',
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 48,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 120,
 'verbosity': 2}

Provided train_data has 70800 rows, 50 time series. Median time series length is 1416 (min=1416, max=1416). 

Provided data contains following columns:
	target: 'target'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2024-12-04 00:32:47
Models that will be trained: ['Naive', 'SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'ETS', 'Theta', 'Chronos[bolt_small]', 'TemporalFusionTransformer']
Training timeseries model Naive. Training for up to 12.7s of the 114.4s of remaining time.
	-2.7824       = Validation score (-MASE)
	0.07    s     = Training runtime
	1.14    s     = Validation (prediction) runtime
Training timeseries model SeasonalNaive. Training for up to 14.1s of the 113.2s of remaining time.
	-0.7585       = Validation score (-MASE)
	0.06    s     = Training runtime
	0.07    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 16.1s of the 113.0s of remaining time.
	-0.6673       = Validation score (-MASE)
	13.10   s     = Training runtime
	1.93    s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 16.3s of the 97.9s of remaining time.
	-0.6584       = Validation score (-MASE)
	1.57    s     = Training runtime
	0.17    s     = Validation (prediction) runtime
Training timeseries model ETS. Training for up to 19.2s of the 96.1s of remaining time.
	-0.7878       = Validation score (-MASE)
	0.06    s     = Training runtime
	7.67    s     = Validation (prediction) runtime
Training timeseries model Theta. Training for up to 22.1s of the 88.3s of remaining time.
	-0.9783       = Validation score (-MASE)
	0.06    s     = Training runtime
	15.84   s     = Validation (prediction) runtime
Training timeseries model Chronos[bolt_small]. Training for up to 24.1s of the 72.3s of remaining time.
	-0.6091       = Validation score (-MASE)
	2.81    s     = Training runtime
	5.75    s     = Validation (prediction) runtime
Training timeseries model TemporalFusionTransformer. Training for up to 31.8s of the 63.7s of remaining time.
	-1.1166       = Validation score (-MASE)
	30.03   s     = Training runtime
	0.08    s     = Validation (prediction) runtime
Fitting simple weighted ensemble.
	Ensemble weights: {'Chronos[bolt_small]': 0.63, 'DirectTabular': 0.13, 'ETS': 0.02, 'RecursiveTabular': 0.14, 'SeasonalNaive': 0.06, 'TemporalFusionTransformer': 0.01}
	-0.5964       = Validation score (-MASE)
	0.39    s     = Training runtime
	15.67   s     = Validation (prediction) runtime
Training complete. Models trained: ['Naive', 'SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'ETS', 'Theta', 'Chronos[bolt_small]', 'TemporalFusionTransformer', 'WeightedEnsemble']
Total runtime: 85.83 s
Best model: WeightedEnsemble
Best model score: -0.5964
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
